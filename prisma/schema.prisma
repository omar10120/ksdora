generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                String         @id @default(uuid())
  email             String         @unique
  password          String
  name              String
  phone             String?
  emailVerified     Boolean        @default(false)
  role              UserRole       @default(USER)
  verificationToken String?        @unique
  createdAt         DateTime       @default(now()) @map("created_at")
  updatedAt         DateTime       @updatedAt @map("updated_at")
  bookings          Booking[]
  refreshTokens     RefreshToken[]
  ratings           Rating[]
  feedbacks         Feedback[]

  @@map("users")
}

model Country {
  id      String  @id @default(uuid()) @db.VarChar(36)
  name    String  @db.VarChar(255)
  nameAr  String  @map("name_ar") @db.VarChar(255)
  code    String? @db.VarChar(2)
  cities  City[]

  @@map("countries")
}

model City {
  id              String   @id @default(uuid()) @db.VarChar(36)
  name            String   @db.VarChar(255)
  nameAr          String   @map("name_ar") @db.VarChar(255)
  countryId       String   @map("country_id") @db.VarChar(36)
  country         Country  @relation(fields: [countryId], references: [id], onUpdate: Restrict)
  departureRoutes Route[]  @relation("departure")
  arrivalRoutes   Route[]  @relation("arrival")

  @@map("cities")
}

model Route {
  id              String   @id @default(uuid()) @db.VarChar(36)
  departureCityId String   @map("departure_city_id") @db.VarChar(36)
  arrivalCityId   String   @map("arrival_city_id") @db.VarChar(36)
  distance        Decimal? @db.Decimal(10, 2)
  departureCity   City     @relation("departure", fields: [departureCityId], references: [id], onUpdate: Restrict, map: "routes_ibfk_1")
  arrivalCity     City     @relation("arrival", fields: [arrivalCityId], references: [id], onUpdate: Restrict, map: "routes_ibfk_2")
  trips           Trip[]

  @@index([arrivalCityId], map: "arrival_city_id")
  @@index([departureCityId], map: "departure_city_id")
  @@map("routes")
}

model Bus {
  id          String     @id @default(uuid()) @db.VarChar(36)
  plateNumber String     @unique(map: "plate_number") @map("plate_number") @db.VarChar(20)
  capacity    Int
  model       String?    @db.VarChar(100)
  status      BusStatus? @default(active)
  trips       Trip[]

  @@map("buses")
}

model Trip {
  id              String      @id @default(uuid()) @db.VarChar(36)
  routeId         String      @map("route_id") @db.VarChar(36)
  busId           String      @map("bus_id") @db.VarChar(36)
  departureTime   DateTime    @map("departure_time") @db.DateTime(0)
  arrivalTime     DateTime    @map("arrival_time") @db.DateTime(0)
  lastBookingTime DateTime    @map("last_Booking_Time") @db.DateTime(0)
  price           Decimal     @db.Decimal(10, 2)
  status          TripStatus? @default(scheduled)
  titleAr         String?
  titleEn         String?
  descriptionAr   String?
  descriptionEn   String?
  latitude  Decimal @db.Decimal(10, 7)
  longitude Decimal @db.Decimal(10, 7)
  imageUrls       String?
  createdAt       DateTime    @default(now()) @map("created_at")
  updatedAt       DateTime    @updatedAt @map("updated_at")
  bookings        Booking[]
  seats           Seat[]
  ratings         Rating[]
  feedbacks       Feedback[]
  ads             Ad[]
  route           Route       @relation(fields: [routeId], references: [id], onUpdate: Restrict, map: "trips_ibfk_1")
  bus             Bus         @relation(fields: [busId], references: [id], onUpdate: Restrict, map: "trips_ibfk_2")

  @@index([busId], map: "bus_id")
  @@index([routeId], map: "route_id")
  @@index([status], map: "status_idx")
  @@index([departureTime], map: "departure_time_idx")
  @@index([status, departureTime], map: "status_departure_idx")
  @@map("trips")
}

model Seat {
  id             String          @id @default(uuid()) @db.VarChar(36)
  tripId         String          @map("trip_id") @db.VarChar(36)
  seatNumber     String          @map("seat_number") @db.VarChar(10)
  status         SeatStatus?     @default(available)
  bookingDetails BookingDetail[]
  trip           Trip            @relation(fields: [tripId], references: [id], onUpdate: Restrict, map: "seats_ibfk_1")

  @@index([tripId], map: "trip_id")
  @@index([status], map: "seat_status_idx")
  @@index([tripId, status], map: "trip_status_idx")
  @@map("seats")
}

model Booking {
  id          String          @id @default(uuid()) @db.VarChar(36)
  userId      String          @map("user_id") @db.VarChar(36)
  tripId      String          @map("trip_id") @db.VarChar(36)
  bookingDate DateTime        @default(now()) @map("booking_date") @db.Timestamp(0)
  status      BookingStatus?  @default(pending)
  totalPrice  Decimal         @map("total_price") @db.Decimal(10, 2)
  createdAt   DateTime        @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt   DateTime        @updatedAt @map("updated_at") @db.Timestamp(0)
  details     BookingDetail[]
  bill        Bill?
  ratings     Rating[]
  feedbacks   Feedback[]
  user        User            @relation(fields: [userId], references: [id], onUpdate: Restrict, map: "bookings_ibfk_1")
  trip        Trip            @relation(fields: [tripId], references: [id], onUpdate: Restrict, map: "bookings_ibfk_2")

  @@index([tripId], map: "trip_id")
  @@index([userId], map: "user_id")
  @@map("bookings")
}

model BookingDetail {
  id        String  @id @default(uuid()) @db.VarChar(36)
  bookingId String  @map("booking_id") @db.VarChar(36)
  seatId    String  @map("seat_id") @db.VarChar(36)
  price     Decimal @db.Decimal(10, 2)
  booking   Booking @relation(fields: [bookingId], references: [id], onUpdate: Restrict, map: "booking_details_ibfk_1")
  seat      Seat    @relation(fields: [seatId], references: [id], onUpdate: Restrict, map: "booking_details_ibfk_2")

  @@index([bookingId], map: "booking_id")
  @@index([seatId], map: "seat_id")
  @@map("booking_details")
}

model RefreshToken {
  id        String   @id @default(uuid()) @db.VarChar(36)
  userId    String   @map("user_id") @db.VarChar(36)
  token     String   @unique @db.VarChar(255)
  expiresAt DateTime @default(now()) @map("expires_at") @db.Timestamp(0)
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(0)
  user      User     @relation(fields: [userId], references: [id], onUpdate: Restrict, map: "refresh_tokens_ibfk_1")

  @@index([userId], map: "user_id")
  @@map("refresh_tokens")
}

model Bill {
  id         String    @id @default(uuid()) @db.VarChar(36)
  bookingId  String    @unique @map("booking_id") @db.VarChar(36)
  amount     Decimal   @db.Decimal(10, 2)
  status     BillStatus @default(unpaid)
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")
  booking    Booking   @relation(fields: [bookingId], references: [id], onUpdate: Restrict, map: "bills_ibfk_1")
  payments   Payment[]

  @@index([bookingId], map: "booking_id")
  @@map("bills")
}

model Payment {
  id            String        @id @default(uuid()) @db.VarChar(36)
  billId        String        @map("bill_id") @db.VarChar(36)
  amount        Decimal       @db.Decimal(10, 2)
  method        PaymentMethod
  status        PaymentStatus @default(pending)
  transactionId String?       @unique
  receiptImage  String?       @map("receipt_image") @db.VarChar(500)
  paidAt        DateTime?     @map("paid_at")
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")
  bill          Bill          @relation(fields: [billId], references: [id], onUpdate: Restrict, map: "payments_ibfk_1")

  @@index([billId], map: "bill_id")
  @@map("payments")
}

model Rating {
  id        String   @id @default(uuid()) @db.VarChar(36)
  bookingId String   @map("booking_id") @db.VarChar(36)
  userId    String   @map("user_id") @db.VarChar(36)
  tripId    String   @map("trip_id") @db.VarChar(36)
  rating    Int
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  booking   Booking  @relation(fields: [bookingId], references: [id], onUpdate: Restrict, map: "ratings_ibfk_1")
  user      User     @relation(fields: [userId], references: [id], onUpdate: Restrict, map: "ratings_ibfk_2")
  trip      Trip     @relation(fields: [tripId], references: [id], onUpdate: Restrict, map: "ratings_ibfk_3")

  @@index([bookingId], map: "booking_id")
  @@index([userId], map: "user_id")
  @@index([tripId], map: "trip_id")
  @@map("ratings")
}

model Feedback {
  id        String   @id @default(uuid()) @db.VarChar(36)
  bookingId String   @map("booking_id") @db.VarChar(36)
  userId    String   @map("user_id") @db.VarChar(36)
  tripId    String   @map("trip_id") @db.VarChar(36)
  message   String   @db.Text
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  booking   Booking  @relation(fields: [bookingId], references: [id], onUpdate: Restrict, map: "feedbacks_ibfk_1")
  user      User     @relation(fields: [userId], references: [id], onUpdate: Restrict, map: "feedbacks_ibfk_2")
  trip      Trip     @relation(fields: [tripId], references: [id], onUpdate: Restrict, map: "feedbacks_ibfk_3")

  @@index([bookingId], map: "booking_id")
  @@index([userId], map: "user_id")
  @@index([tripId], map: "trip_id")
  @@map("feedbacks")
}

model Ad {
  id          String   @id @default(uuid()) @db.VarChar(36)
  imageUrl    String   @map("image_url") @db.VarChar(255)
  url         String   @db.VarChar(255)
  description String?  @db.Text
  tripId      String?  @map("trip_id") @db.VarChar(36)
  trip        Trip?    @relation(fields: [tripId], references: [id], onUpdate: Restrict, map: "ads_ibfk_1")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@index([tripId], map: "trip_id")
  @@map("ads")
}


enum UserRole {
  USER
  ADMIN
}

enum BusStatus {
  active
  maintenance
  inactive
  passenger_filling
  in_trip
}

enum TripStatus {
  scheduled
  in_progress @map("in-progress")
  completed
  cancelled
}

enum SeatStatus {
  available
  booked
  reserved
  blocked
}

enum BookingStatus {
  pending
  confirmed
  cancelled
  completed
}

enum BillStatus {
  unpaid
  paid
  cancelled
}

enum PaymentMethod {
  cash
  online_payment
}

enum PaymentStatus {
  pending
  successful
  failed
}
